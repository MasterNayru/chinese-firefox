// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.ppcOptions = {
    togbar: ['toggle'],
    modifiers: ['accel', 'alt', 'shift'],
    keys: ['(disabled)', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Back', 'Escape', 'Page Up', 'Page Down', 'End', 'Home', 'Left', 'Up', 'Right', 'Down', 'Insert', 'Delete', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'],
    kindex: ['COMP', 'H', 'L', 'E', 'DK', 'N', 'V', 'Y', 'P', 'IN', 'I', 'U'],
    checkRange: function(e, name, min, max) {
      var v, _i, _results;
      e = document.getElementById(e);
      v = e.value * 1;
      if (isNaN(v) || __indexOf.call((function() {
        _results = [];
        for (var _i = min; min <= max ? _i < max : _i > max; min <= max ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), v) < 0) {
        e.focus();
        alert("Invalid " + name + " (" + v + "). Valid range: " + min + "-" + max);
        return false;
      }
      e.value = parseInt(v);
      return true;
    },
    onLoad: function() {
      var c, cfg, e, k, key, list, m, mo, name, s, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      document.getElementById('ccp-bottomlb').hidden = false;
      _ref = this.togbar;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        s = window.PCPrefs.getString("" + name + ".mod");
        _ref1 = this.modifiers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mo = _ref1[_j];
          document.getElementById("ccp-" + name + "-" + mo).checked = s.indexOf(mo) !== -1;
        }
        list = document.getElementById("ccp-" + name + "-list");
        _ref2 = this.keys;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          key = _ref2[_k];
          m = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'menuitem');
          m.setAttribute('label', key);
          list.appendChild(m);
        }
        s = window.PCPrefs.getString("" + name + ".key");
        if (s === '') {
          s = this.keys[0];
        }
        e = document.getElementById("ccp-" + name + "-key");
        e.value = s;
        this.keyChanged(e);
      }
      _ref3 = window.PCPrefs.getString('kindex').split(',');
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        k = _ref3[_l];
        e = document.getElementById("ccp-kindex-" + k);
        if (e != null) {
          e.checked = true;
        }
      }
      _ref4 = window.ppcConfigList;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        cfg = _ref4[_m];
        e = document.getElementById("ccp-" + cfg[1]);
        if (e) {
          switch (cfg[0]) {
            case 0:
              e.value = window.PCPrefs.getInt(cfg[1]);
              break;
            case 1:
              e.value = window.PCPrefs.getString(cfg[1]);
              break;
            case 2:
              e.checked = window.PCPrefs.getBool(cfg[1]);
              break;
            case 3:
              e.color = window.PCPrefs.getString(cfg[1]);
          }
        }
      }
      e = document.getElementById('ccp-priority');
      _ref5 = window.PCPrefs.getString('dpriority').split('|');
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        c = _ref5[_n];
        if (c.match(/(.+?)#(.+)/)) {
          e.appendItem(RegExp.$2, RegExp.$1);
        }
      }
      if (window["arguments"] && window["arguments"].length && (window["arguments"][0] === 'dic')) {
        return document.getElementById('ccp-tabbox').selectedIndex = 3;
      }
    },
    onOK: function() {
      var buffer, c, cfg, e, f, i, item, k, key, m, mo, name, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (!this.checkRange('ccp-wmax', 'Maximum Entries To Display', 3, 100)) {
        return false;
      }
      _ref = this.togbar;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        m = [];
        _ref1 = this.modifiers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mo = _ref1[_j];
          if (document.getElementById("ccp-" + name + "-" + mo).checked) {
            m.push(mo);
          }
        }
        window.PCPrefs.setString("" + name + ".mod", m.join(' '));
        key = document.getElementById("ccp-" + name + "-key").value;
        window.PCPrefs.setString("" + name + ".key", key === '(disabled)' ? '' : key);
      }
      k = [];
      if ((_ref2 = document.getElementById("ccp-kindex-" + c)) != null ? _ref2.checked : void 0) {
        _ref3 = this.kindex;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          c = _ref3[_k];
          k.push(c);
        }
      }
      window.PCPrefs.setString('kindex', k.join(','));
      _ref4 = window.ppcConfigList;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        cfg = _ref4[_l];
        e = document.getElementById("ccp-" + cfg[1]);
        if (e) {
          switch (cfg[0]) {
            case 0:
              window.PCPrefs.setInt(cfg[1], e.value);
              break;
            case 1:
              window.PCPrefs.setString(cfg[1], e.value);
              break;
            case 2:
              window.PCPrefs.setBool(cfg[1], e.checked);
              break;
            case 3:
              window.PCPrefs.setString(cfg[1], e.color);
          }
        }
      }
      buffer = [];
      e = document.getElementById('ccp-priority');
      for (i = _m = 0, _ref5 = e.itemCount; 0 <= _ref5 ? _m < _ref5 : _m > _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
        item = e.getItemAtIndex(i);
        buffer.push(item.value + '#' + item.label);
      }
      window.PCPrefs.setString('dpriority', buffer.join('|'));
      f = document.getElementById('ccp-flag');
      if (f) {
        window.PCPrefs.setString('flag', f.value);
      }
      return true;
    },
    keyChanged: function(e) {
      var disable, mo, _i, _len, _ref, _results;
      e.value = e.value.replace(/^\s+|\s+$/g, '').replace(/\s+/g, ' ');
      disable = (e.value === '') || (e.value === '(disabled)');
      _ref = this.modifiers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mo = _ref[_i];
        _results.push(document.getElementById(e.id.replace('key', mo)).disabled = disable);
      }
      return _results;
    },
    browseFile: function(id) {
      var fp, nsIFilePicker, r;
      readonly(nsIFilePicker = Components.interfaces.nsIFilePicker);
      fp = Components.classes['@mozilla.org/filepicker;1'].createInstance(nsIFilePicker);
      fp.init(window, 'Browse', nsIFilePicker.modeSave);
      fp.appendFilters(nsIFilePicker.filterAll | nsIFilePicker.filterText);
      fp.defaultString = document.getElementById(id).value;
      r = fp.show();
      if ((r === nsIFilePicker.returnOK) || (r === nsIFilePicker.returnReplace)) {
        return document.getElementById(id).value = fp.file.path;
      }
    },
    movePriority: function(dir) {
      var i, j, label, list, value, _i, _ref, _results;
      list = document.getElementById('ccp-priority');
      i = list.selectedIndex;
      if (i === -1) {
        return;
      }
      j = i + dir;
      if (__indexOf.call((function() {
        _results = [];
        for (var _i = 0, _ref = list.itemCount; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), j) < 0) {
        return;
      }
      label = list.selectedItem.label;
      value = list.selectedItem.value;
      list.removeItemAt(i);
      list.insertItemAt(j, label, value);
      return list.selectedIndex = j;
    },
    resetColors: function(e) {
      var col1, col2, col3, col4, col5, colp, theme;
      theme = document.getElementById("ccp-css").value;
      col1 = document.getElementById("ccp-cpick1");
      col2 = document.getElementById("ccp-cpick2");
      col3 = document.getElementById("ccp-cpick3");
      col4 = document.getElementById("ccp-cpick4");
      col5 = document.getElementById("ccp-cpick5");
      colp = document.getElementById("ccp-cpinyin");
      if (theme === "charcoal") {
        col1.color = "#F2777A";
        col2.color = "#99CC99";
        col3.color = "#6699CC";
        col4.color = "#CC99CC";
        col5.color = "#CCCCCC";
        return colp.color = "#66CCCC";
      } else if (theme === "paper") {
        col1.color = "#E12525";
        col2.color = "#24B624";
        col3.color = "#0000FF";
        col4.color = "#DA6EFF";
        col5.color = "#777777";
        return colp.color = "#00B1AE";
      } else {
        col1.color = "#F2777A";
        col2.color = "#5AA759";
        col3.color = "#438AD5";
        col4.color = "#CB5CCA";
        col5.color = "#9A9595";
        return colp.color = "#235D9A";
      }
    },
    gotoLink: function(id) {
      var msg;
      switch (id) {
        case 1:
          msg = "url#http://www.perapera.org";
          break;
        case 2:
          msg = "url#http://www.twitter.com/peraperakun";
          break;
        case 3:
          msg = "url#http://www.facebook.com/pages/Perapera-Chinese-and-Japanese-Popup-Translator/254329074599598";
          break;
        case 4:
          msg = "url#https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YYDNFAW3ZFD88";
      }
      return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).notifyObservers(null, 'cperapera', msg);
    },
    download: function() {
      return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).notifyObservers(null, 'cperapera', 'getdic');
    }
  };

}).call(this);
