// Generated by CoffeeScript 1.3.3

/*

	Perapera Chinese
	Copyright (C) 2005-2011 Jonathan Zarate
	http://www.polarcloud.com/

	---

	Originally based on RikaiXUL 0.4 by Todd Rudick
	http://www.rikai.com/
	http://rikaixul.mozdev.org/

	---

	This program is free software you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

	---

	Please do not change or remove any of the copyrights or links to web pages
	when modifying any of the files.
*/


(function() {
  var exports,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = window;

  exports.ppcMain = {
    altView: 0,
    enabled: 0,
    sticky: false,
    version: null,
    getBrowserTB: function() {
      if (exports.ppcMain.tabMail) {
        return exports.ppcMain.tabMail.getBrowserForSelectedTab();
      }
      return document.getElementById('messagepane') || document.getElementById('content-frame');
    },
    getBrowserFF: function() {
      return exports.gBrowser.mCurrentBrowser;
    },
    global: function() {
      return Components.classes["@mozilla.org/appshell/appShellService;1"].getService(Components.interfaces.nsIAppShellService).hiddenDOMWindow;
    },
    ppcObs: {
      observe: function(subject, topic, data) {
        if (topic === 'cperapera') {
          if (data.match(/url#(.*)/)) {
            exports.ppcMain.gotoURL(RegExp.$1);
          }
          if (data === 'getdic') {
            exports.ppcMain.showDownloadPage();
            return;
          }
          if (data === 'dready') {
            if (exports.ppcMain.tabSelectPending) {
              exports.ppcMain.tabSelectPending = false;
              exports.ppcMain.onTabSelect();
            }
            return;
          }
          if ((exports.ppcConfig.enmode >= 2) && ((data === 'enable') || (data === 'disable'))) {
            if (exports.ppcMain.enabled !== (data === 'enable')) {
              if (exports.ppcMain.enabled) {
                exports.ppcMain.disable(gBrowser.mCurrentBrowser, 0);
              } else {
                exports.ppcMain.enabled = 1;
              }
              return exports.ppcMain.onTabSelect();
            }
          }
        }
      },
      register: function() {
        return Components.classes["@mozilla.org/observer-service;1"].getService(Components.interfaces.nsIObserverService).addObserver(exports.ppcMain.ppcObs, 'cperapera', false);
      },
      unregister: function() {
        return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).removeObserver(exports.ppcMain.ppcObs, 'cperapera');
      },
      notifyState: function(state) {
        return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).notifyObservers(null, 'cperapera', state);
      }
    },
    tbObs: {
      observe: function(subject, topic, data) {
        var e;
        if (topic === 'mail:composeOnSend') {
          e = window.content.document.getElementById('cperapera-css');
          if (e != null) {
            e.parentNode.removeChild(e);
          }
          e = window.content.document.getElementById('cperapera-window');
          return e != null ? e.parentNode.removeChild(e) : void 0;
        }
      },
      register: function() {
        return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).addObserver(exports.ppcMain.tbObs, 'mail:composeOnSend', false);
      },
      unregister: function() {
        return Components.classes['@mozilla.org/observer-service;1'].getService(Components.interfaces.nsIObserverService).removeObserver(exports.ppcMain.tbObs, 'mail:composeOnSend');
      }
    },
    tbTabMonitor: {
      monitorName: 'cperapera',
      onTabSwitched: function(aTab, aOldTab) {
        return exports.ppcMain.onTabSelect();
      },
      onTabTitleChanged: function(aTab) {},
      onTabOpened: function(aTab, aIsFirstTab, aWasCurrentTab) {},
      onTabClosing: function(aTab) {},
      onTabPersist: function(aTab) {},
      onTabRestored: function(aTab, aState, aIsFirstTab) {}
    },
    init: function() {
      return window.addEventListener('load', (function() {
        return exports.ppcMain._init();
      }), false);
    },
    _init: function() {
      var b, docID, key, mks, name, nb, s, _i, _len, _ref;
      window.addEventListener('unload', (function() {
        return exports.ppcMain.onUnload();
      }), false);
      if (true) {
        docID = document.documentElement.id;
        this.isTB = (docID === "messengerWindow") || (docID === "msgcomposeWindow");
        if (this.isTB) {
          mks = document.getElementById('mailKeys') || document.getElementById('editorKeys');
        } else {
          mks = document.getElementById('mainKeyset') || document.getElementById('navKeys');
        }
        if (mks) {
          _ref = ['toggle', 'lbar'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            s = PCPrefs.getString(name + '.key');
            if ((s.length > 0) && (s !== '(disabled)')) {
              key = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'key');
              key.setAttribute('id', "cperapera-key-" + name);
              if (s.length > 1) {
                key.setAttribute('keycode', "VK_" + (s.replace(' ', '_').toUpperCase()));
              } else {
                key.setAttribute('key', s);
              }
              key.setAttribute('modifiers', PCPrefs.getString("" + name + ".mod"));
              key.setAttribute('command', "cperapera-" + name + "-cmd");
              mks.appendChild(key);
            }
          }
        }
      }
      this.ppcObs.register();
      exports.ppcConfig.load();
      exports.ppcConfig.observer.start();
      if (this.isTB) {
        this.getBrowser = function() {
          if (exports.ppcMain.tabMail) {
            return exports.ppcMain.tabMail.getBrowserForSelectedTab();
          }
          return document.getElementById('messagepane') || document.getElementById('content-frame');
        };
        this.tabMail = document.getElementById('tabmail');
        if (this.tabMail) {
          this.tabMail.registerTabMonitor(this.tbTabMonitor);
        }
        this.tbObs.register();
      } else {
        this.getBrowser = (function() {
          return exports.gBrowser.mCurrentBrowser;
        });
        exports.gBrowser.mTabContainer.addEventListener('select', this.onTabSelect, false);
        if (exports.ppcConfig.enmode >= 2) {
          if ((exports.ppcConfig.enmode === 3) || (this.global().cperaperaActive)) {
            this.enabled = 1;
            this.onTabSelect();
          }
        }
        try {
          if (exports.PCPrefs.getBool('firsticon')) {
            exports.PCPrefs.setBool('firsticon', false);
            nb = document.getElementById('nav-bar');
            nb.insertItem('cperapera-toggle-button');
            nb.setAttribute('currentset', nb.currentSet);
            document.persist(nb.id, 'currentset');
          }
        } catch (ex) {

        }
      }
      b = document.getElementById('cperapera-toggle-cmd');
      if (b != null) {
        b.setAttribute('flag', exports.PCPrefs.getString('flag'));
      }
      if (exports.PCPrefs.getBool('firstrun1')) {
        setTimeout(function() {
          var url;
          url = 'http://www.perapera.org/thank-you/';
          try {
            if (this.isTB) {
              return Components.classes['@mozilla.org/messenger;1'].createInstance().QueryInterface(Components.interfaces.nsIMessenger).launchExternalURL(url);
            } else {
              return exports.gBrowser.selectedTab = exports.gBrowser.addTab(url);
            }
          } catch (ex) {
            return alert("There was an error opening: " + url);
          }
        }, 1000);
        return exports.PCPrefs.setBool('firstrun1', false);
      }
    },
    onUnload: function() {
      this.ppcObs.unregister();
      exports.ppcConfig.observer.stop();
      if (this.isTB) {
        if (this.tabMail) {
          this.tabMail.unregisterTabMonitor(this.tbTabMonitor);
        }
        return this.tbObs.unregister();
      } else {
        return exports.gBrowser.mTabContainer.removeEventListener('select', this.onTabSelect, false);
      }
    },
    initDictionary: function() {
      if (exports.ppcData.missing) {
        if (confirm('No dictionary file was found. Show the download page?')) {
          this.showDownloadPage();
        }
        return false;
      }
      try {
        exports.ppcData.init();
      } catch (ex) {
        alert("Error: " + ex);
        return false;
      }
      return true;
    },
    showDownloadPage: function() {
      return this.gotoURL("http://www.perapera.org/chinese");
    },
    gotoURL: function(url) {
      try {
        if (this.isTB) {
          return Components.classes['@mozilla.org/messenger;1'].createInstance().QueryInterface(Components.interfaces.nsIMessenger).launchExternalURL(url);
        } else {
          return exports.gBrowser.selectedTab = exports.gBrowser.addTab(url);
        }
      } catch (ex) {
        return alert("There was an error opening " + url);
      }
    },
    checkVersion: function() {
      var id;
      id = 'chineseperakun@gmail.com';
      try {
        Components.utils["import"]('resource:#gre/modules/AddonManager.jsm');
        AddonManager.getAddonByID(id, function(addon) {
          return exports.ppcMain.version = addon.version;
        });
      } catch (ex) {
        try {
          this.version = Components.classes['@mozilla.org/extensions/manager;1'].getService(Components.interfaces.nsIExtensionManager).getItemForID(id).version;
        } catch (ex) {

        }
      }
      if (exports.ppcConfig.checkversion) {
        return setTimeout(function() {
          var v;
          if (exports.ppcMain.version) {
            v = 'v' + exports.ppcMain.version;
            if (exports.PCPrefs.getString('version') !== v) {
              exports.PCPrefs.setString('version', v);
              return exports.ppcMain.showDownloadPage();
            }
          }
        }, 2000);
      }
    },
    onTabSelect: function() {
      if (exports.ppcData.dicPath && (!exports.ppcData.dicPath.ready)) {
        return exports.ppcMain.tabSelectPending = true;
      } else {
        return exports.ppcMain._onTabSelect();
      }
    },
    _onTabSelect: function() {
      var b, bro, en;
      bro = this.getBrowser();
      if (this.isTB) {
        if (this.enabled) {
          this.enable(bro, 0);
        } else {
          this.disable(bro);
        }
      } else if ((ppcConfig.enmode > 0) && (this.enabled === 1) && (bro.cperapera === null)) {
        this.enable(bro, 0);
      }
      en = (bro.cperapera != null);
      b = document.getElementById('cperapera-toggle-button');
      if (b != null) {
        b.setAttribute('rc_enabled', en);
      }
      b = document.getElementById('cperapera-toggle-cmd');
      if (b != null) {
        b.setAttribute('checked', en);
      }
      b = document.getElementById('cperapera-status');
      return b != null ? b.setAttribute('rc_enabled', en) : void 0;
    },
    showPopup: function(text, elem, pos, lbPop) {
      var bo, cb, content, css, df, dropdown, height, j, p, popup, sp, t, topdoc, v, w, width, x, y, z;
      content = this.isTB ? this.getBrowser().contentWindow : exports.content;
      topdoc = content.document;
      x = pos ? pos.screenX : 0;
      y = pos ? pos.screenY : 0;
      this.lbPop = lbPop;
      popup = topdoc.getElementById('cperapera-window');
      if (!(popup != null)) {
        css = topdoc.createElementNS('http://www.w3.org/1999/xhtml', 'link');
        css.setAttribute('rel', 'stylesheet');
        css.setAttribute('type', 'text/css');
        css.setAttribute('href', exports.ppcConfig.css);
        css.setAttribute('id', 'cperapera-css');
        topdoc.getElementsByTagName('head')[0].appendChild(css);
        popup = topdoc.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        popup.setAttribute('id', 'cperapera-window');
        topdoc.documentElement.appendChild(popup);
        popup.setAttribute('lang', 'en');
        popup.addEventListener('dblclick', function(ev) {
          exports.ppcMain.hidePopup();
          return ev.stopPropagation();
        }, true);
        if (exports.ppcConfig.resizedoc) {
          if ((topdoc.body.clientHeight < 1024) && (topdoc.body.style.minHeight === '')) {
            topdoc.body.style.minHeight = '1024px';
            topdoc.body.style.overflow = 'auto';
          }
        }
      }
      if (text.isDropdown) {
        popup.style.left = "" + ((topdoc.body.clientWidth / 2) - 450) + "px";
        popup.setAttribute('dropdown', true);
        popup.innerHTML = text.data;
        return dropdown = topdoc.getElementById('cperapera-dropdown');
      } else {
        if (popup.hasAttribute('dropdown')) {
          popup.removeAttribute('dropdown');
        }
        popup.style.maxWidth = lbPop ? '' : '600px';
        if (topdoc.contentType === 'text/plain') {
          df = document.createDocumentFragment();
          sp = document.createElementNS('http://www.w3.org/1999/xhtml', 'span');
          try {
            df.appendChild(sp);
            sp.innerHTML = text;
          } catch (ex) {
            alert(ex);
          }
          while (popup.firstChild != null) {
            popup.removeChild(popup.firstChild);
          }
          popup.appendChild(df);
        } else {
          popup.innerHTML = text;
          popup.style.display = '';
        }
        if (elem) {
          popup.style.top = '-1000px';
          popup.style.left = '0px';
          popup.style.display = '';
          width = popup.offsetWidth;
          height = popup.offsetHeight;
          if (width <= 0) {
            width = 200;
          }
          if (height <= 0) {
            height = 0;
            j = 0;
            while ((j = text.indexOf('<br', j)) !== -1) {
              j += 5;
              height += 22;
            }
            height += 25;
          }
          if (this.altView === 1) {
            x = 0;
            y = 0;
          } else if (this.altView === 2) {
            x = content.innerWidth - (width + 20);
            y = content.innerHeight - (height + 20);
          } else {
            cb = this.getBrowser();
            bo = cb.boxObject;
            x -= bo.screenX;
            y -= bo.screenY;
            if (cb.markupDocumentViewer != null) {
              z = cb.markupDocumentViewer.fullZoom || 1;
              if (z !== 1) {
                x = Math.round(x / z);
                y = Math.round(y / z);
              }
            }
            if (elem instanceof Components.interfaces.nsIDOMHTMLOptionElement) {
              x -= pos.pageX;
              y -= pos.pageY;
              p = elem;
              while (p) {
                x += p.offsetLeft;
                y += p.offsetTop;
                p = p.offsetParent;
              }
              w = elem.parentNode.offsetWidth + 5;
              x += w;
              if ((x + width) > content.innerWidth) {
                x -= w + width + 5;
                if (x < 0) {
                  x = 0;
                }
              }
              if ((y + height) > content.innerHeight) {
                y = content.innerHeight - height - 5;
                if (y < 0) {
                  y = 0;
                }
              }
            } else {
              if ((x + width) > (content.innerWidth - 20)) {
                x = (content.innerWidth - width) - 20;
                if (x < 0) {
                  x = 0;
                }
              }
              v = 25;
              if (elem.title && (elem.title !== '')) {
                v += 15;
              }
              if ((y + v + height) > content.innerHeight) {
                t = y - height - 30;
                if (t >= 0) {
                  y = t;
                }
              } else {
                y += v;
              }
            }
          }
        }
        popup.style.left = (x + content.scrollX) + 'px';
        popup.style.top = (y + content.scrollY) + 'px';
        return popup.style.display = '';
      }
    },
    hidePopup: function() {
      var doc, popup;
      doc = this.isTB ? new XPCNativeWrapper(this.getBrowser().contentDocument) : exports.content.document;
      popup = doc.getElementById('cperapera-window');
      if (popup != null) {
        popup.style.display = 'none';
        popup.innerHTML = '';
      }
      this.lbPop = 0;
      return this.title = null;
    },
    isVisible: function() {
      var doc, popup;
      doc = this.isTB ? this.getBrowser().contentDocument : window.content.document;
      popup = doc.getElementById('cperapera-window');
      return (popup != null ? popup.style.display : void 0) !== 'none';
    },
    clearHi: function() {
      var sel, tdata;
      tdata = this.getBrowser().cperapera;
      if ((!tdata) || (!tdata.prevSelView)) {
        return;
      }
      if (tdata.prevSelView.closed) {
        tdata.prevSelView = null;
        return;
      }
      sel = tdata.prevSelView.getSelection();
      if (sel.isCollapsed || (tdata.selText === sel.toString())) {
        sel.removeAllRanges();
      }
      tdata.prevSelView = null;
      tdata.kanjiChar = null;
      return tdata.selText = null;
    },
    lastFound: null,
    savePrep: function(clip) {
      var e, f, me, mk, sep, text, _i, _len;
      f = this.lastFound;
      if ((!(f != null)) || (f.length === 0)) {
        return null;
      }
      if (clip) {
        me = exports.ppcConfig.smaxce;
        mk = exports.ppcConfig.smaxck;
      } else {
        me = exports.ppcConfig.smaxfe;
        mk = exports.ppcConfig.smaxfk;
      }
      if (!f.fromLB) {
        mk = 1;
      }
      text = '';
      for (_i = 0, _len = f.length; _i < _len; _i++) {
        e = f[_i];
        if (e.kanji) {
          if (mk-- <= 0) {
            continue;
          }
          text += exports.ppcData.makeText(e, 1);
        } else {
          if (me <= 0) {
            continue;
          }
          text += exports.ppcData.makeText(e, me);
          me -= e.data.length;
        }
      }
      if (exports.ppcConfig.snlf === 1) {
        text = text.replace(/\n/g, '\r\n');
      } else if (exports.ppcConfig.snlf === 2) {
        text = text.replace(/\n/g, '\r');
      }
      sep = exports.ppcConfig.ssep;
      switch (sep) {
        case 'Tab':
          sep = '\t';
          break;
        case 'Comma':
          sep = ',';
          break;
        case 'Space':
          sep = ' ';
      }
      if (sep !== '\t') {
        return text.replace(/\t/g, sep);
      }
      return text;
    },
    copyToClip: function() {
      var defn, e, f, hanzi, maxEntries, pinyin, spacer, temp, text, _i, _len;
      f = this.lastFound;
      if ((!f) || (f.length === 0)) {
        return null;
      }
      maxEntries = 1;
      spacer = "\t";
      text = '';
      for (_i = 0, _len = f.length; _i < _len; _i++) {
        e = f[_i];
        if (maxEntries <= 0) {
          continue;
        }
        text += exports.ppcData.makeText(e, maxEntries);
        maxEntries -= e.data.length;
        text = text.replace(/\n/g, '').replace(/\r/g, '');
        temp = text.split('\t');
        if (exports.ppcConfig.showhanzi === "botht") {
          hanzi = temp[0].split(' ')[0] + spacer + temp[0].split(' ')[1];
        } else if (exports.ppcConfig.showhanzi === "boths") {
          hanzi = temp[0].split(' ')[1] + spacer + temp[0].split(' ')[0];
        } else if (exports.ppcConfig.showhanzi === "simp") {
          hanzi = temp[0].split(' ')[1];
        } else {
          hanzi = temp[0].split(' ')[0];
        }
        pinyin = exports.ppcData.parsePinyin(temp[1]);
        defn = temp[2];
        if (exports.ppcConfig.pinyin === "zhuyin") {
          text = hanzi + spacer + pinyin.zhuyin + spacer + defn;
        } else if (exports.ppcConfig.pinyin === "tonemarks") {
          text = hanzi + spacer + pinyin.tonemarks + spacer + defn;
        } else {
          text = hanzi + spacer + pinyin.tonenums + spacer + defn;
        }
      }
      if (text !== '') {
        Components.classes['@mozilla.org/widget/clipboardhelper;1'].getService(Components.interfaces.nsIClipboardHelper).copyString(text);
        return this.showPopup('Copied to clipboard.');
      }
    },
    saveToKotobaBar: function() {
      var defn, e, f, hanzi, maxEntries, pinyin, sidebarWindow, temp, text, _i, _len, _results;
      exports.toggleSidebar('viewCKotobaSidebar', true);
      sidebarWindow = document.getElementById("sidebar").contentWindow;
      f = this.lastFound;
      if ((!f) || (f.length === 0)) {
        return null;
      }
      maxEntries = 1;
      text = '';
      _results = [];
      for (_i = 0, _len = f.length; _i < _len; _i++) {
        e = f[_i];
        if (maxEntries <= 0) {
          continue;
        }
        text += exports.ppcData.makeText(e, maxEntries);
        maxEntries -= e.data.length;
        text = text.replace(/\n/g, '').replace(/\r/g, '');
        temp = text.split('\t');
        if (exports.ppcConfig.showhanzi === "botht" || exports.ppcConfig.showhanzi === "trad") {
          hanzi = temp[0].split(' ')[0];
        } else {
          hanzi = temp[0].split(' ')[1];
        }
        pinyin = exports.ppcData.parsePinyin(temp[1]);
        defn = temp[2];
        switch (exports.ppcConfig.pinyin) {
          case "zhuyin":
            _results.push(sidebarWindow.ckotobabar.addEntry(hanzi, pinyin.zhuyin, defn));
            break;
          case "tonemarks":
            _results.push(sidebarWindow.ckotobabar.addEntry(hanzi, pinyin.tonemarks, defn));
            break;
          default:
            _results.push(sidebarWindow.ckotobabar.addEntry(hanzi, pinyin.tonenums, defn));
        }
      }
      return _results;
    },
    saveToFile: function() {
      var fos, lf, os, text;
      try {
        if ((text = this.savePrep(0)) === null) {
          return;
        }
        if (exports.ppcConfig.sfile.length === 0) {
          this.showPopup('Please set the filename in Preferences.');
          return;
        }
        lf = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
        lf.initWithPath(ppcConfig.sfile);
        fos = Components.classes['@mozilla.org/network/file-output-stream;1'].createInstance(Components.interfaces.nsIFileOutputStream);
        fos.init(lf, 0x02 | 0x08 | 0x10, -1, 0);
        os = Components.classes['@mozilla.org/intl/converter-output-stream;1'].createInstance(Components.interfaces.nsIConverterOutputStream);
        os.init(fos, exports.ppcConfig.sfcs, 0, 0x3F);
        os.writeString(text);
        os.close();
        fos.close();
        return this.showPopup('Saved.');
      } catch (ex) {
        return this.showPopup("Error while saving: " + ex);
      }
    },
    configPage: function() {
      return window.openDialog('chrome://cperapera/content/options.xul', '', 'chrome,centerscreen');
    },
    keysDown: [],
    onKeyDown: function(ev) {
      return exports.ppcMain._onKeyDown(ev);
    },
    _onKeyDown: function(ev) {
      var i, ofs, tdata, _i, _j;
      if (ev.altKey || ev.metaKey || ev.ctrlKey) {
        return;
      }
      if (ev.shiftKey && (ev.keyCode !== 16)) {
        return;
      }
      if (this.keysDown[ev.keyCode]) {
        return;
      }
      if (!this.isVisible()) {
        return;
      }
      if (ppcConfig.nopopkeys && (ev.keyCode !== 16)) {
        return;
      }
      switch (ev.keyCode) {
        case 13:
          this.clearHi();
          break;
        case 16:
          tdata = ev.currentTarget.cperapera;
          if (tdata) {
            ppcData.selectNext();
            if (tdata.titleShown) {
              this.showTitle(tdata);
            } else {
              this.show(tdata);
            }
          }
          break;
        case 27:
          this.hidePopup();
          this.clearHi();
          break;
        case 65:
          this.altView = (this.altView + 1) % 3;
          if (this.altView) {
            this.status("Alternate View #" + this.altView);
          } else {
            this.status('Normal View');
          }
          this.show(ev.currentTarget.cperapera);
          break;
        case 67:
          this.copyToClip();
          break;
        case 68:
          exports.ppcConfig.hidedef = !exports.ppcConfig.hidedef;
          this.status("" + (exports.ppcConfig.hidedef ? 'Hide' : 'Show') + " definition.");
          if (exports.ppcConfig.hidedef) {
            this.showPopup('Hiding definitions. Press "D" to show again.');
          } else {
            this.show(ev.currentTarget.cperapera);
          }
          break;
        case 83:
          this.saveToKotobaBar();
          break;
        case 66:
          ofs = ev.currentTarget.cperapera.uofs;
          for (i = _i = 50; _i >= 0; i = --_i) {
            ev.currentTarget.cperapera.uofs = --ofs;
            ppcData.select(0);
            if (this.show(ev.currentTarget.cperapera) >= 0) {
              if (ofs >= ev.currentTarget.cperapera.uofs) {
                break;
              }
            }
          }
          break;
        case 77:
          ev.currentTarget.cperapera.uofsNext = 1;
          break;
        case 78:
          for (i = _j = 50; _j >= 0; i = --_j) {
            ev.currentTarget.cperapera.uofs += ev.currentTarget.cperapera.uofsNext;
            ppcData.select(0);
            if (this.show(ev.currentTarget.cperapera) >= 0) {
              break;
            }
          }
          break;
        case 75:
          this.sticky = !this.sticky;
          this.status(this.sticky ? 'Sticky Popup' : 'Normal Popup');
          break;
        case 87:
          exports.toggleSidebar('viewCKotobaSidebar');
          break;
        case 89:
          this.altView = 0;
          ev.currentTarget.cperapera.popY += 20;
          this.show(ev.currentTarget.cperapera);
          break;
        default:
          if ((ev.keyCode >= 49) && (ev.keyCode <= 57)) {
            exports.ppcData.select(ev.keyCode - 49);
            this.show(ev.currentTarget.cperapera);
          }
          return;
      }
      this.keysDown[ev.keyCode] = 1;
      if (!exports.ppcConfig.nopopkeys) {
        ev.stopPropagation();
        return ev.preventDefault();
      }
    },
    onKeyUp: function(ev) {
      if (exports.ppcMain.keysDown[ev.keyCode]) {
        return exports.ppcMain.keysDown[ev.keyCode] = 0;
      }
    },
    onMouseDown: function(ev) {
      if (!exports.ppcMain.cursorInPopup(ev)) {
        return exports.ppcMain.hidePopup();
      }
    },
    unicodeInfo: function(c) {
      var hex, u;
      hex = '0123456789ABCDEF';
      u = c.charCodeAt(0);
      return c + ' U' + hex[(u >>> 12) & 15] + hex[(u >>> 8) & 15] + hex[(u >>> 4) & 15] + hex[u & 15];
    },
    inlineNames: {
      '#text': true,
      'FONT': true,
      'TT': true,
      'I': true,
      'B': true,
      'BIG': true,
      'SMALL': true,
      'STRIKE': true,
      'S': true,
      'U': true,
      'EM': true,
      'STRONG': true,
      'DFN': true,
      'CODE': true,
      'SAMP': true,
      'KBD': true,
      'VAR': true,
      'CITE': true,
      'ABBR': true,
      'ACRONYM': true,
      'A': true,
      'Q': true,
      'SUB': true,
      'SUP': true,
      'SPAN': true,
      'WBR': true,
      'RUBY': true,
      'RBC': true,
      'RTC': true,
      'RB': true,
      'RT': true,
      'RP': true
    },
    getInlineText: function(node, selEndList, maxLength) {
      var result, text;
      if ((node.nodeType === Node.TEXT_NODE) && (node.data.length === 0)) {
        return '';
      }
      text = '';
      result = node.ownerDocument.evaluate('descendant-or-self::text()[not(parent::rp) and not(ancestor::rt)]', node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
      while ((maxLength > 0) && (node = result.iterateNext())) {
        text += node.data.substr(0, maxLength);
        maxLength -= node.data.length;
        selEndList.push(node);
      }
      return text;
    },
    getNext: function(node) {
      while (true) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
        if (!((node != null) && this.inlineNames[node.nodeName])) {
          break;
        }
      }
      return null;
    },
    getTextFromRange: function(rangeParent, offset, selEndList, maxLength) {
      var nextNode, text;
      if (rangeParent.ownerDocument.evaluate('boolean(parent::rp or ancestor::rt)', rangeParent, null, XPathResult.BOOLEAN_TYPE, null).booleanValue === true) {
        return '';
      }
      if (rangeParent.nodeType !== Node.TEXT_NODE) {
        return '';
      }
      text = rangeParent.data.substr(offset, maxLength);
      selEndList.push(rangeParent);
      nextNode = rangeParent;
      while ((text.length < maxLength) && ((nextNode = this.getNext(nextNode)) !== null) && this.inlineNames[nextNode.nodeName]) {
        text += this.getInlineText(nextNode, selEndList, maxLength - text.length);
      }
      return text;
    },
    highlightMatch: function(doc, rp, ro, matchLen, selEndList, tdata) {
      var offset, range, sel, selEnd, _i, _len;
      if (selEndList.length === 0) {
        return;
      }
      offset = matchLen + ro;
      for (_i = 0, _len = selEndList.length; _i < _len; _i++) {
        selEnd = selEndList[_i];
        if (offset <= selEnd.data.length) {
          break;
        }
        offset -= selEnd.data.length;
      }
      range = doc.createRange();
      range.setStart(rp, ro);
      range.setEnd(selEnd, offset);
      sel = doc.defaultView.getSelection();
      if ((!sel.isCollapsed) && (tdata.selText !== sel.toString())) {
        return;
      }
      sel.removeAllRanges();
      sel.addRange(range);
      return tdata.selText = sel.toString();
    },
    show: function(tdata) {
      var doc, e, ro, rp, selEndList, text, u;
      rp = tdata.prevRangeNode;
      ro = tdata.prevRangeOfs + tdata.uofs;
      tdata.uofsNext = 1;
      if (!rp) {
        this.clearHi();
        this.hidePopup();
        return 0;
      }
      if ((ro < 0) || (ro >= rp.data.length)) {
        this.clearHi();
        this.hidePopup();
        return 0;
      }
      u = rp.data.charCodeAt(ro);
      if (isNaN(u)) {
        this.clearHi();
        this.hidePopup();
        return -2;
      }
      selEndList = [];
      text = this.getTextFromRange(rp, ro, selEndList, 13);
      if (text.length === 0) {
        this.clearHi();
        this.hidePopup();
        return 0;
      }
      e = exports.ppcData.wordSearch(text);
      if (!(e != null)) {
        this.hidePopup();
        this.clearHi();
        return 0;
      }
      this.lastFound = [e];
      if (e.matchLen === 0) {
        e.matchLen = 1;
      }
      tdata.uofsNext = e.matchLen;
      tdata.uofs = ro - tdata.prevRangeOfs;
      if (exports.ppcConfig.highlight && (!(__indexOf.call(tdata.prevTarget, 'form') >= 0))) {
        doc = tdata.prevRangeNode.ownerDocument;
        if (!(doc != null)) {
          this.clearHi();
          this.hidePopup();
          return 0;
        }
        this.highlightMatch(doc, tdata.prevRangeNode, ro, e.matchLen, selEndList, tdata);
        tdata.prevSelView = doc.defaultView;
      }
      tdata.titleShown = false;
      this.showPopup(exports.ppcData.makeHtml(e), tdata.prevTarget, tdata.pos);
      return 1;
    },
    showTitle: function(tdata) {
      var e;
      e = exports.ppcData.translate(tdata.title);
      if (!(e != null)) {
        this.hidePopup();
        return;
      }
      e.title = tdata.title.substr(0, e.textLen).replace(/[\x00-\xff]/g, (function(c) {
        return "&#" + (c.charCodeAt(0));
      }));
      if (tdata.title.length > e.textLen) {
        e.title += '...';
      }
      this.lastFound = [e];
      tdata.titleShown = true;
      return this.showPopup(exports.ppcData.makeHtml(e), tdata.prevTarget, tdata.pos);
    },
    onMouseMove: function(ev) {
      return exports.ppcMain._onMouseMove(ev);
    },
    _onMouseMove: function(ev) {
      var distance, dx, dy, ro, rp, tdata;
      tdata = ev.currentTarget.cperapera;
      rp = ev.rangeParent;
      ro = ev.rangeOffset;
      /*
      		cb = @getBrowser()
      		bbo = cb.boxObject
      		z = cb.markupDocumentViewer ? cb.markupDocumentViewer.fullZoom : 1
      		y = (ev.screenY - bbo.screenY)
      		@status('sy=' + ev.screenY + ' z=' + z +
      			' bsy=' + bbo.screenY + ' y=' + y + ' y/z=' + Math.round(y / z))
      */

      if (this.sticky && this.cursorInPopup(ev)) {
        clearTimeout(tdata.timer);
        tdata.timer = null;
        return;
      }
      if (ev.target === tdata.prevTarget) {
        if (tdata.title) {
          return;
        }
        if ((rp === tdata.prevRangeNode) && (ro === tdata.prevRangeOfs)) {
          return;
        }
      }
      if (tdata.timer) {
        clearTimeout(tdata.timer);
        tdata.timer = null;
      }
      if ((ev.explicitOriginalTarget.nodeType !== Node.TEXT_NODE) && !(__indexOf.call(ev.target, 'form') >= 0)) {
        rp = null;
        ro = -1;
      }
      tdata.prevTarget = ev.target;
      tdata.prevRangeNode = rp;
      tdata.prevRangeOfs = ro;
      tdata.title = null;
      tdata.uofs = 0;
      this.uofsNext = 1;
      if (ev.button !== 0) {
        return;
      }
      if (this.lbPop) {
        return;
      }
      if ((rp != null) && (rp.data != null) && (ro < rp.data.length)) {
        exports.ppcData.select(ev.shiftKey ? exports.ppcData.kanjiPos : 0);
        tdata.pos = {
          screenX: ev.screenX,
          screenY: ev.screenY,
          pageX: ev.pageX,
          pageY: ev.pageY
        };
        tdata.timer = setTimeout((function() {
          return exports.ppcMain.show(tdata);
        }), exports.ppcConfig.popdelay);
        return;
      }
      if (exports.ppcConfig.title) {
        if ((typeof ev.target.title === 'string') && ev.target.title.length) {
          tdata.title = ev.target.title;
        } else if ((typeof ev.target.alt === 'string') && ev.target.alt.length) {
          tdata.title = ev.target.alt;
        }
      }
      if (ev.target.nodeName === 'OPTION') {
        tdata.title = ev.target.text;
      } else if (ev.target.nodeName === 'SELECT') {
        tdata.title = ev.target.options[ev.target.selectedIndex].text;
      }
      if (tdata.title) {
        tdata.pos = {
          screenX: ev.screenX,
          screenY: ev.screenY,
          pageX: ev.pageX,
          pageY: ev.pageY
        };
        tdata.timer = setTimeout((function() {
          return exports.ppcMain.showTitle(tdata);
        }), exports.ppcConfig.popdelay);
        return;
      }
      if (tdata.pos && !this.sticky) {
        dx = tdata.pos.screenX - ev.screenX;
        dy = tdata.pos.screenY - ev.screenY;
        distance = Math.sqrt(dx * dx + dy * dy);
        if (distance > 4) {
          this.clearHi();
          return this.hidePopup();
        }
      }
    },
    cursorInPopup: function(pos) {
      var doc, popup;
      doc = this.isTB ? this.getBrowser().contentDocument : exports.content.document;
      popup = doc.getElementById('cperapera-window');
      return ((popup != null) && popup.style.display !== 'none') && (pos.pageX >= popup.offsetLeft) && (pos.pageX <= popup.offsetLeft + popup.offsetWidth) && (pos.pageY >= popup.offsetTop) && (pos.pageY <= popup.offsetTop + popup.offsetHeight);
    },
    _enable: function(b) {
      if ((b != null) && !b.cperapera) {
        b.cperapera = {};
        b.addEventListener('mousemove', this.onMouseMove, false);
        b.addEventListener('mousedown', this.onMouseDown, false);
        b.addEventListener('keydown', this.onKeyDown, true);
        b.addEventListener('keyup', this.onKeyUp, true);
        return true;
      }
      return false;
    },
    enable: function(b, mode) {
      var obj, ok;
      if (!this.initDictionary()) {
        return;
      }
      ok = this._enable(b, mode);
      if (this.isTB) {
        this._enable(document.getElementById('multimessage'));
        this._enable(document.getElementById('messagepane'));
      }
      if (ok) {
        if (mode === 1) {
          if (exports.ppcConfig.enmode > 0) {
            this.enabled = 1;
            if (exports.ppcConfig.enmode === 2) {
              this.global().cperaperaActive = true;
              this.ppcObs.notifyState('enable');
            }
          }
          if (exports.ppcConfig.minihelp) {
            obj = {};
            obj.data = exports.ppcFile.read('chrome://cperapera/locale/minihelp.htm');
            obj.isDropdown = true;
            return this.showPopup(obj);
          } else {
            return this.showPopup('Perapera Chinese Enabled');
          }
        }
      }
    },
    _disable: function(b) {
      var e;
      if (b != null) {
        b.removeEventListener('mousemove', this.onMouseMove, false);
        b.removeEventListener('mousedown', this.onMouseDown, false);
        b.removeEventListener('keydown', this.onKeyDown, true);
        b.removeEventListener('keyup', this.onKeyUp, true);
        e = b.contentDocument.getElementById('cperapera-css');
        if (e != null) {
          e.parentNode.removeChild(e);
        }
        e = b.contentDocument.getElementById('cperapera-window');
        if (e != null) {
          e.parentNode.removeChild(e);
        }
        delete b.cperapera;
        return true;
      }
      return false;
    },
    disable: function(b, mode) {
      var browser, _i, _len, _ref;
      this._disable(b);
      if (this.isTB) {
        this.enabled = 0;
        this._disable(document.getElementById('multimessage'));
        this._disable(document.getElementById('messagepane'));
      } else if (this.enabled) {
        this.enabled = 0;
        _ref = exports.gBrowser.browsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          browser = _ref[_i];
          this._disable(browser, 0);
        }
        if ((exports.ppcConfig.enmode === 2) && (mode === 1)) {
          this.global().cperaperaActive = false;
          this.ppcObs.notifyState('disable');
        }
      }
      return exports.ppcData.done();
    },
    toggle: function() {
      var b;
      b = this.getBrowser();
      if (b.cperapera) {
        this.disable(b, 1);
      } else {
        this.enable(b, 1);
      }
      return this.onTabSelect();
    },
    getSelected: function(win) {
      var frame, s, text, _i, _len, _ref;
      s = win.getSelection();
      if (s) {
        text = s.toString();
        if (text.search(/[^\s]/) !== -1) {
          return text;
        }
      }
      _ref = win.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        text = this.getSelected(frame);
        if (text.length > 0) {
          return text;
        }
      }
      return '';
    },
    clearSelected: function(win) {
      var frame, s, _i, _len, _ref, _results;
      s = win.getSelection();
      if (s) {
        s.removeAllRanges();
      }
      _ref = win.frames;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        _results.push(this.clearSelected(frame));
      }
      return _results;
    },
    lbHide: function() {
      document.getElementById('cperapera-lbar').hidden = true;
      this.hidePopup();
      exports.ppcData.done();
      return this.lbText.value = '';
    },
    lbToggle: function() {
      var bottom, e, text, top;
      text = exports.ppcConfig.selinlb ? this.getSelected(exports.content).substr(0, 30) : '';
      this.lbText = document.getElementById('ppc-lookupbar-text');
      e = document.getElementById('cperapera-lbar');
      if (e != null ? e.hidden : void 0) {
        if ((exports.ppcConfig._bottomlb === true) !== exports.ppcConfig.bottomlb) {
          exports.ppcConfig._bottomlb = exports.ppcConfig.bottomlb;
          if (exports.ppcConfig.bottomlb) {
            bottom = document.getElementById('browser-bottombox');
            if ((bottom != null) && (e.parentNode !== bottom)) {
              e.parentNode.removeChild(e);
              e.setAttribute('ordinal', 0);
              bottom.insertBefore(e, bottom.firstChild);
            }
          } else {
            top = document.getElementById('navigator-toolbox');
            if (top && (e.parentNode !== top)) {
              e.parentNode.removeChild(e);
              e.setAttribute('ordinal', 1000);
              top.appendChild(e);
            }
          }
        }
        e.hidden = false;
        this.lbText.focus();
      } else if (!this.lbText.getAttribute("focused")) {
        this.lbText.focus();
      } else if ((text.length === 0) || (text === this.lbLast)) {
        this.lbHide();
        return;
      }
      return this.lbSearchButton();
    },
    lbKeyPress: function(ev) {
      switch (ev.keyCode) {
        case 13:
          this.lookupSearch(this.lbText.value);
          return ev.stopPropagation();
        case 27:
          if (this.isVisible()) {
            this.hidePopup();
          } else {
            this.lbToggle();
          }
          return ev.stopPropagation();
      }
    },
    lbSearchButton: function() {
      var text;
      if (exports.ppcConfig.selinlb) {
        text = this.getSelected(exports.content).slice(0, 30);
        if (text.length > 0) {
          this.lbText.value = text;
          this.clearSelected(exports.content);
        }
      }
      this.lookupSearch(this.lbText.value);
      this.lbText.select();
      return this.lbText.focus();
    },
    lookupSearch: function(text) {
      var c, have, html, i, result, s, t, _i, _j, _ref, _results;
      s = text.replace(/^\s+|\s+$/g, '');
      if (s.length === 0) {
        return;
      }
      if ((this.lbLast === s) && this.isVisible()) {
        exports.ppcData.selectNext();
      } else {
        this.lbLast = s;
        exports.ppcData.select(0);
      }
      if ((s.length === 0) || !!this.initDictionary()) {
        return this.hidePopup();
      } else {
        if ((s.search(/^:/) !== -1) || (s.search(/^([^\u3000-\uFFFF]+)$/) !== -1)) {
          result = exports.ppcData.textSearch(s.replace(/^:/, ''));
        } else {
          result = exports.ppcData.wordSearch(s, true);
        }
        if (result != null) {
          html = exports.ppcData.makeHtml(result);
          this.lastFound = [result];
        } else {
          html = "\u300C " + s + " \u300D was not found.";
          this.lastFound = [];
        }
        this.lastFound.fromLB = 1;
        have = {};
        t = s + html;
        for (i = _i = 0, _ref = t.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          c = t.charCodeAt(i);
          if (__indexOf.call((function() {
            _results = [];
            for (var _j = 0x3000; 0x3000 <= 0xFFFF ? _j < 0xFFFF : _j > 0xFFFF; 0x3000 <= 0xFFFF ? _j++ : _j--){ _results.push(_j); }
            return _results;
          }).apply(this), c) >= 0) {
            c = t.charAt(i);
            if (!have[c]) {
              result = exports.ppcData.kanjiSearch(c);
              if (result != null) {
                this.lastFound.push(result);
                have[c] = 1;
                kanji += "<td class=\"q-k\">" + (exports.ppcData.makeHtml(result)) + "</td>";
              }
            }
          }
        }
        return this.showPopup("<table class=\"q-tb\"><tr><td class=\"q-w\">" + html + "</td>" + kanji + "</tr></table>", null, null, true);
      }
    },
    lookupBoxKey: function(ev) {
      switch (ev.keyCode) {
        case 13:
          this.lookupSearch(ev.target.value);
          return ev.stopPropagation();
        case 27:
          if (this.isVisible()) {
            this.hidePopup();
          }
          ev.target.value = "";
          return ev.stopPropagation();
      }
    },
    statusClick: function(ev) {
      if (ev.button !== 2) {
        return exports.ppcMain.toggle();
      }
    },
    statusTimer: null,
    status: function(text) {
      var e;
      if (this.statusTimer) {
        clearTimeout(this.statusTimer);
        this.statusTimer = null;
      }
      e = document.getElementById('cperapera-status-text');
      if (e) {
        e.setAttribute('label', text.substr(0, 80));
        e.setAttribute('hidden', 'false');
        return this.statusTimer = setTimeout((function() {
          return e.setAttribute('hidden', 'true');
        }), 3000);
      }
    }
  };

  exports.ppcConfig = {
    observer: {
      observe: function(subject, topic, data) {
        if (topic === 'nsPref:changed') {
          return exports.ppcConfig.load();
        }
      },
      start: function() {
        return Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefBranch).QueryInterface(Components.interfaces.nsIPrefBranch2).addObserver('extensions.cperapera.', this, false);
      },
      stop: function() {
        return Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefBranch).QueryInterface(Components.interfaces.nsIPrefBranch2).removeObserver('extensions.cperapera.', this);
      }
    },
    load: function() {
      var a, b, browser, e, name, type, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      try {
        if (exports.PCPrefs.branch.getPrefType('wpos') !== exports.PCPrefs.branch.PREF_BOOL) {
          exports.PCPrefs.branch.clearUserPref('wpos');
        }
      } catch (ex) {

      }
      _ref = exports.ppcConfigList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], type = _ref1[0], name = _ref1[1];
        switch (type) {
          case 0:
            this[name] = exports.PCPrefs.getInt(name, null);
            break;
          case 1:
            this[name] = exports.PCPrefs.getString(name, '');
            break;
          case 2:
            this[name] = exports.PCPrefs.getBool(name, null);
            break;
          case 3:
            this[name] = exports.PCPrefs.getString(name, '');
        }
      }
      _ref2 = ['cm', 'tm'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        name = _ref2[_j];
        a = !this["" + name + "toggle"];
        e = document.getElementById("cperapera-toggle-" + name);
        if (e != null) {
          e.hidden = a;
        }
        b = !this["" + name + "lbar"];
        e = document.getElementById("cperapera-lbar-" + name);
        if (e != null) {
          e.hidden = b;
        }
        e = document.getElementById("cperapera-separator-" + name);
        if (e != null) {
          e.hidden = a || b;
        }
      }
      if (this.css.indexOf('/') === -1) {
        this.css = "chrome://cperapera/skin/popup-" + ppcConfig.css + ".css";
      }
      if (exports.ppcMain.isTB) {
        this.enmode = 1;
      } else {
        _ref3 = exports.gBrowser.browsers;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          browser = _ref3[_k];
          e = browser.contentDocument.getElementById('cperapera-css');
          if (e != null) {
            e.setAttribute('href', this.css);
          }
        }
      }
      e = document.getElementById('cperapera-status');
      if (e != null) {
        e.hidden = this.sticon === 0;
      }
      if ((this._bottomlb === true) !== this.bottomlb) {
        e = document.getElementById('cperapera-lbar');
        if (e != null) {
          e.hidden = true;
        }
      }
      return exports.ppcData.loadConfig();
    }
  };

  exports.ppcMain.init();

}).call(this);
